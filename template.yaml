AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  ## DynamoDB Table
  MySimpleTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  ## IAM Role for Query Lambda Function
  DynamoDBReadPolicyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: DynamoDBReadPolicyRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: DynamoDBReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                Resource: !GetAtt MySimpleTable.Arn
  
  ## IAM Role for Write Lambda Function
  MyUpdateFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: MyUpdateFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: MyDynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:UpdateItem'
                Resource: !GetAtt MySimpleTable.Arn
  
  ## Lambda Query Function
  MyQueryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: MyQueryFunction
      Handler: app.queryHandler
      Runtime: nodejs14.x
      CodeUri: queryApp/
      Timeout: 10
      Role: !GetAtt DynamoDBReadPolicyRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref MySimpleTable

  ## Lambda Write Function
  MyUpdateFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: MyUpdateFunction
      Handler: app.handler
      Runtime: nodejs14.x
      CodeUri: lambdaApp/
      Timeout: 10
      Role: !GetAtt MyUpdateFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref MySimpleTable

  ## API Gateway
  MyApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: 'MyAPI'
        paths:
          /update:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyUpdateFunction.Arn}/invocations
                passthroughBehavior: 'when_no_match'
                httpMethod: POST
                type: aws_proxy
              responses: {}
              security:
                - sigv4: []
          /query:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyQueryFunction.Arn}/invocations
                passthroughBehavior: 'when_no_match'
                httpMethod: POST
                type: aws_proxy
              responses: {}
              security:
                - sigv4: []

  ## Lambda Function
  MyApiInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MyUpdateFunction.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*'

Outputs:
  WriteApiURL:
    Description: 'API Gateway endpoint URL to write on the database'
    Value: !Sub 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update'
  QueryApiURL:
    Description: 'API Gateway endpoint URL to read/query the database'
    Value: !Sub 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/query?id={MiroIserId}'
